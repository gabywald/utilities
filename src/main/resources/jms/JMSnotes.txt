
https://www.javatpoint.com/jms-tutorial -- 

JMS Queue Example

To develop JMS queue example, you need to install any application server. Here, we are using glassfish3 server where we are creating two JNDI.

    Create connection factory named myQueueConnectionFactory
    Create destination resource named myQueue

After creating JNDI, create server and receiver application. You need to run server and receiver in different console. Here, we are using eclipse IDE, it is opened in different console by default.


-> https://javaee.github.io/glassfish/downloads/ri/README // https://javaee.github.io/glassfish/download <-
run glassfish5 on java 8 ("sdk use java 8.0.242-open")

https://github.com/wgxo/docker-jms-example

https://howtodoinjava.com/jms/jms-java-message-service-tutorial/

https://www.logicbig.com/tutorials/java-ee-tutorial/jms/jms-helloworld.html


MockNeat : 
	https://www.mockneat.com/docs/ -- 
	https://www.mockneat.com/start/ -- 
	https://www.mockneat.com/tutorial/ --
	
	https://en.wikipedia.org/wiki/Card_security_code -- 
	
Outils arguments argumebnts / options : 
	https://stackoverflow.com/questions/367706/how-do-i-parse-command-line-arguments-in-java -- 
	http://commons.apache.org/proper/commons-cli/ -- Apche Common CLI
	https://picocli.info/ -- picocli - a mighty tiny command line interface
	http://www.martiansoftware.com/jsap/ -- JSAP v2.1: the Java Simple Argument Parser
	https://stackoverflow.com/questions/7341683/parsing-arguments-to-a-java-command-line-program/7341992 -- Parsing arguments to a Java command line program
	
	https://dzone.com/articles/java-command-line-interfaces-part-7-jcommander -- 
	https://jcommander.org/ -- 

	https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html -- 
	https://bip.weizmann.ac.il/course/prog2/tutorial/essential/attributes/_posix.html-- 
	POSIX Conventions for Command Line Arguments
    Command-Line Arguments warns that the use of command-line arguments in a Java program may cause that program to be unportable (that is, it will not be 100% Pure Java). If a program requires command-line arguments, then it should follow the POSIX conventions for them. The POSIX conventions are summarized here:
        An option is a hyphen followed by a single alphanumeric character, like this: -o.
        An option may require an argument (which must appear immediately after the option); for example, -o argument or -oargument.
        Options that do not require arguments can be grouped after a hyphen, so, for example, -lst is equivalent to -t -l -s.
        Options can appear in any order; thus -lst is equivalent to -tls.
        Options can appear multiple times.
        Options precede other nonoption arguments: -lst nonoption.
        The -- argument terminates options.
        The - option is typically used to represent one of the standard input streams. 

	
	
